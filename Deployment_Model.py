# -*- coding: utf-8 -*-
"""Deployment_Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1chL7sKdNna0NbGnXrP80J45LdEo1Mg6Z

# **Deployment**
"""

#!pip install streamlit

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, OrdinalEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline, make_pipeline
from sklearn.ensemble import RandomForestClassifier
import warnings
warnings.filterwarnings('ignore')

import pandas as pd
data=pd.read_excel('bank_data.xlsx')
data.drop(['industrial_risk','operating_risk'],axis=1,inplace=True)

transformer= ColumnTransformer(transformers=[
    ('tnff',OneHotEncoder(sparse=False,handle_unknown='ignore'),[0,1,2,3])
],remainder='passthrough')
transformer

x=data.iloc[:,:-1]
y=data['class']

model=Pipeline(steps=[('transformer',transformer),('model',RandomForestClassifier())])
model.fit(x,y)

#checking accuracy
print('Model Accuracy:',model.score(x,y))

#working test for pipeline
test=pd.DataFrame({'management_risk':['low risk','high risk'],
                   'financial_flexibility':['medium risk','low risk'],
                   'credibility':['high risk','medium risk'],
                   'competitiveness':['medium risk','low risk']})


ypred=model.predict(test)
print('Predicted Class Result:',ypred)

import pickle

pickle_file=open('model.pkl',mode='wb')
pickle.dump(model, pickle_file)



#streamlit app
import streamlit as st
import pickle
import pandas as pd

pickle_app = open('model.pkl', 'rb')
model = pickle.load(pickle_app)
pickle_app.close()


def predict(management_risk, financial_flexibility, credibility, competitiveness):
  prediction=model.predict([[management_risk, financial_flexibility, credibility, competitiveness]])
  prediction_proba=model.predict_proba([[management_risk, financial_flexibility, credibility, competitiveness]])
  return prediction,prediction_proba


def main():
  st.title('BANKRUPTCY PREDICTION APPLICATION')
  st.sidebar.header('User Input Risk')
  management_risk = st.sidebar.selectbox('Management Risk', ('low risk', 'medium risk', 'high risk'))
  financial_flexibility = st.sidebar.selectbox('Financial_Flexibility Risk', ('low risk', 'medium risk', 'high risk'))
  credibility = st.sidebar.selectbox('Credibility Risk', ('low risk', 'medium risk', 'high risk'))
  competitiveness = st.sidebar.selectbox('Competitiveness Risk', ('low risk', 'medium risk', 'high risk'))

  st.subheader('User Input Parameters')
  data = {'management_risk': management_risk,
            'financial_flexibility': financial_flexibility,
            'credibility': credibility,
            'competitiveness': competitiveness,}
  features = pd.DataFrame(data, index=[0])
  st.write(features)



  st.header('*Prediction :*')
  if st.sidebar.button('Prediction'):
    st.subheader('Prediction Result')
    prediction,prediction_proba=predict(management_risk,financial_flexibility,credibility,competitiveness)
    if str(prediction[0])=='bankruptcy':
      st.warning('bankruptcy')
    else:
      st.success('non-bankruptcy')

    st.subheader('Prediction Probability')
    proba = pd.DataFrame(prediction_proba, columns=['bankruptcy', 'non-bankruptcy'])
    st.write(proba)


if __name__ == '__main__':
  main()



